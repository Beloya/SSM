<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd 
		 http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
         http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop.xsd 
                     http://www.springframework.org/schema/websocket  
       http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd">

	<context:component-scan base-package="com.MyBlog.Service" />
	 <context:component-scan base-package="com.MyBlog.ServiceImpl"/> 
	  <context:component-scan base-package="com.MyBlog.Core"/> 
	  <context:component-scan base-package="com.MyBlog.Socket"/> 
	<!-- 数据配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:Shiro.properties</value>
			</list>
		</property> 
	</bean>
	  <!-- 连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<property name="removeAbandonedTimeout" value="240" />
		<property name="timeBetweenEvictionRunsMillis" value="240000" />  
		<property name="minEvictableIdleTimeMillis" value="1800000" /> 
	
		<!-- 验证数据库连接的有效性 -->
		     <property name="validationQuery" value="SELECT 1" />
		     <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.   -->
		      <property name="testWhileIdle" value="true" />
		       <property name="testOnBorrow" value="false" />
		       <!-- returnObject对返回的connection进行validateObject校验 -->
		       <property name="testOnReturn" value="false" />
		       <!-- 打开PSCache，并且指定每个连接上PSCache的大小   缓存游标,推荐oracle打开-->
		        <!--property name="poolPreparedStatements" value="true" />
		        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" /-->
		         <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		            <property name="filters" value="stat" />
	</bean>
	<!-- bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="mapperLocations" 
		value="classpath:com/MyBlog/Mapping/*.xml"></property> </bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.MyBlog.Dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 事务传播属性 -->
		<tx:attributes>
			<!-- 所有已get、query、select开头的方法都是只读 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="Find*" read-only="true" />
			<tx:method name="read*" read-only="true" />
			<!-- 其它的所有方法支持事务设置的属性（异常回滚） -->
			<tx:method name="*"  />
		</tx:attributes>
	</tx:advice>
	<!-- 事务拦截切面 -->
 <aop:config>
        <aop:pointcut id="ServiceTxOperation" expression="execution(* com.MyBlog.Service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceTxOperation"/>
    </aop:config>
    
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
		<!-- 事务开启 -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    
	<!-- redis数据源 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />

		  <property name="numTestsPerEvictionRun" value="10024"/>
		   <property name="timeBetweenEvictionRunsMillis" value="180000"/>
		    <property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" /> 
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"></constructor-arg>
        <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg> 
        <property name="password" value="${redis.pass}"></property>
    </bean>

		 <!--配置redisSentinelConfiguration 哨兵模式-->
    <bean id="redisSentinelConfiguration"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster">
                </property>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.host3.cloudq}"/>
                    <constructor-arg name="port" value="${redis.port3.cloudq}"/>
                </bean>
            </set>
        </property>
    </bean>

	
	
<!-- 静态资源检查 -->
<bean id="resourceUrlProvider" class="org.springframework.web.servlet.resource.ResourceUrlProvider"/>
		<bean id="genericUtils"  class="com.MyBlog.utils.GenericUtils"/>

<bean id="RedisUtil" class="com.MyBlog.cache.RedisUtil">
		<property name="jedisConnectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<bean id="MybaitsredisCacheTransfer" class="com.MyBlog.cache.MybaitsRedisCacheTransfer">
		<property name="jedisConnectionFactory" ref="jedisConnectionFactory" />
		<property name="MybaitsKey" value="Mybaits_Cache" />
	</bean>
	

</beans>